# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: polling-app-server # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      - SPRING_DATASOURCE_URL_FILE=/run/url/db-url
      - SPRING_DATASOURCE_USERNAME_FILE=/run/url/db-user
      - SPRING_DATASOURCE_PASSWORD=/run/url.txt/db-passwd
    secrets:
      - db-url
      - db-user
      - db-passwd
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  app-client:
    build:
      context: polling-app-client # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "9090:80" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend

  # Database Service (Mysql)
  db:
    image: postgres:13
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_DATABASE=/run/url/name
      - POSTGRES_USER_FILE=/run/url/user
      - POSTGRES_PASSWORD_FILE=/run/url/passwd
    secrets:
      - name
      - user
      - passwd
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend

# Volumes
volumes:
  db-data:
# Secrets
secrets:
  db-url:
    file: ./secrets/url.txt
  db-user:
    file: ./secrets/user.txt
  db-passwd:
    file: ./secrets/passwd.txt
  name:
    file: ./secrets/name.txt
  user:
    file: ./secrets/user.txt
  passwd:
    file: ./secrets/passwd.txt


# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
